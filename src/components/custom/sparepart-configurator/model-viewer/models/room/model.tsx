/* eslint-disable react/no-unknown-property */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 simple-3d-model.glb 
*/

import { Dispatch, FC, SetStateAction } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';
import { GltfModelType } from '../../../hooks/use-gltf-model';
import { SelectedMesh, clickHandler } from '../utils';

export type RoomGltf = GLTF & {
  gltfModelType: GltfModelType;
  nodes: {
    Plane: THREE.Mesh;
    Plane001: THREE.Mesh;
    Cube001_1: THREE.Mesh;
    Cube001_2: THREE.Mesh;
    Cube002_1: THREE.Mesh;
    Cube002_2: THREE.Mesh;
    Cube002: THREE.Mesh;
    Plane002: THREE.Mesh;
    Plane003: THREE.Mesh;
    Plane004: THREE.Mesh;
    Plane005: THREE.Mesh;
    Plane006: THREE.Mesh;
    Plane008_1: THREE.Mesh;
    Plane008_2: THREE.Mesh;
    Plane009: THREE.Mesh;
    Sphere_1: THREE.Mesh;
    Sphere_2: THREE.Mesh;
    Cylinder: THREE.Mesh;
    Sphere001: THREE.Mesh;
    Cube005_1: THREE.Mesh;
    Cube005_2: THREE.Mesh;
    Plane010: THREE.Mesh;
    Cube006: THREE.Mesh;
    Cube006_1: THREE.Mesh;
    Plane011: THREE.Mesh;
    Plane013: THREE.Mesh;
    Cube005: THREE.Mesh;
    Cylinder001: THREE.Mesh;
    Cylinder002: THREE.Mesh;
    Cylinder003: THREE.Mesh;
    Cylinder004: THREE.Mesh;
    Plane014: THREE.Mesh;
  };
  materials: {
    ['Material.002']: THREE.MeshStandardMaterial;
    ['Material.009']: THREE.MeshStandardMaterial;
    ['Material.001']: THREE.MeshStandardMaterial;
    ['Material.006']: THREE.MeshStandardMaterial;
    ['Material.003']: THREE.MeshStandardMaterial;
    ['Material.005']: THREE.MeshStandardMaterial;
    ['Material.004']: THREE.MeshStandardMaterial;
    ['Material.017']: THREE.MeshStandardMaterial;
    ['Material.015']: THREE.MeshStandardMaterial;
    ['Material.010']: THREE.MeshStandardMaterial;
    ['Material.011']: THREE.MeshStandardMaterial;
    ['Material.016']: THREE.MeshStandardMaterial;
    ['Material.012']: THREE.MeshStandardMaterial;
    ['Material.008']: THREE.MeshStandardMaterial;
  };
};

type Props = {
  gltfModel: RoomGltf;
  selectedId: string | null;
  setSelectedId: Dispatch<SetStateAction<string | null>>;
};

export const RoomModel: FC<Props> = ({ gltfModel, selectedId, setSelectedId }) => {
  const { nodes, materials } = gltfModel;

  return (
    <group dispose={null}>
      <mesh
        geometry={nodes.Plane.geometry}
        material={materials['Material.002']}
        position={[0, 0.234, 0]}
        onClick={(event) => clickHandler(event, nodes.Plane.uuid, setSelectedId)}
      >
        {selectedId === nodes.Plane.uuid && <SelectedMesh />}
      </mesh>

      <mesh
        geometry={nodes.Plane001.geometry}
        material={materials['Material.009']}
        position={[-0.827, 0.284, 0]}
        scale={[0.861, 1, 1]}
        onClick={(event) => clickHandler(event, nodes.Plane001.uuid, setSelectedId)}
      >
        {selectedId === nodes.Plane001.uuid && <SelectedMesh />}
      </mesh>
      <group position={[0, 1.054, 0]}>
        <mesh
          geometry={nodes.Cube001_1.geometry}
          material={materials['Material.001']}
          onClick={(event) => clickHandler(event, nodes.Cube001_1.uuid, setSelectedId)}
        >
          {selectedId === nodes.Cube001_1.uuid && <SelectedMesh />}
        </mesh>
        <mesh
          geometry={nodes.Cube001_2.geometry}
          material={materials['Material.002']}
          onClick={(event) => clickHandler(event, nodes.Cube001_2.uuid, setSelectedId)}
        >
          {selectedId === nodes.Cube001_2.uuid && <SelectedMesh />}
        </mesh>
      </group>
      <group position={[1.038, 1.147, 0]} scale={[1, 0.479, 0.146]}>
        <mesh
          geometry={nodes.Cube002_1.geometry}
          material={materials['Material.006']}
          onClick={(event) => clickHandler(event, nodes.Cube002_1.uuid, setSelectedId)}
        >
          {selectedId === nodes.Cube002_1.uuid && <SelectedMesh />}
        </mesh>
        <mesh
          geometry={nodes.Cube002_2.geometry}
          material={materials['Material.001']}
          onClick={(event) => clickHandler(event, nodes.Cube002_2.uuid, setSelectedId)}
        >
          {selectedId === nodes.Cube002_2.uuid && <SelectedMesh />}
        </mesh>
      </group>
      <mesh
        geometry={nodes.Cube002.geometry}
        material={materials['Material.006']}
        position={[-0.078, 1.245, -0.874]}
        scale={1.119}
        onClick={(event) => clickHandler(event, nodes.Cube002.uuid, setSelectedId)}
      >
        {selectedId === nodes.Cube002.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Plane002.geometry}
        material={materials['Material.003']}
        position={[0.348, 0.464, -0.048]}
        scale={[0.355, 0.827, 0.671]}
        onClick={(event) => clickHandler(event, nodes.Plane002.uuid, setSelectedId)}
      >
        {selectedId === nodes.Plane002.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Plane003.geometry}
        material={materials['Material.003']}
        position={[0.348, 0.605, 0.566]}
        scale={[0.355, 0.827, 0.051]}
        onClick={(event) => clickHandler(event, nodes.Plane003.uuid, setSelectedId)}
      >
        {selectedId === nodes.Plane003.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Plane004.geometry}
        material={materials['Material.005']}
        position={[-0.051, 0.518, 0.568]}
        scale={[0.056, 0.062, 0.056]}
        onClick={(event) => clickHandler(event, nodes.Plane004.uuid, setSelectedId)}
      >
        {selectedId === nodes.Plane004.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Plane005.geometry}
        material={nodes.Plane005.material}
        position={[0.348, 0.566, -0.039]}
        scale={[0.355, 0.827, 0.531]}
        onClick={(event) => clickHandler(event, nodes.Plane005.uuid, setSelectedId)}
      />
      <mesh
        geometry={nodes.Plane006.geometry}
        material={materials['Material.004']}
        position={[0.348, 0.566, -0.039]}
        scale={[0.355, 0.827, 0.531]}
        onClick={(event) => clickHandler(event, nodes.Plane006.uuid, setSelectedId)}
      >
        {selectedId === nodes.Plane006.uuid && <SelectedMesh />}
      </mesh>
      <group position={[-0.498, 0.283, -0.548]} scale={[0.279, 0.25, 0.25]}>
        <mesh
          geometry={nodes.Plane008_1.geometry}
          material={materials['Material.017']}
          onClick={(event) => clickHandler(event, nodes.Plane008_1.uuid, setSelectedId)}
        >
          {selectedId === nodes.Plane008_1.uuid && <SelectedMesh />}
        </mesh>
        <mesh
          geometry={nodes.Plane008_2.geometry}
          material={materials['Material.003']}
          onClick={(event) => clickHandler(event, nodes.Plane008_2.uuid, setSelectedId)}
        >
          {selectedId === nodes.Plane008_2.uuid && <SelectedMesh />}
        </mesh>
      </group>
      <mesh
        geometry={nodes.Plane009.geometry}
        material={materials['Material.005']}
        position={[-0.768, 0.604, -0.322]}
        scale={[0.044, 0.056, 0.044]}
        onClick={(event) => clickHandler(event, nodes.Plane009.uuid, setSelectedId)}
      >
        {selectedId === nodes.Plane009.uuid && <SelectedMesh />}
      </mesh>
      <group position={[-0.596, 0.809, -0.515]} scale={0.116}>
        <mesh
          geometry={nodes.Sphere_1.geometry}
          material={materials['Material.004']}
          onClick={(event) => clickHandler(event, nodes.Sphere_1.uuid, setSelectedId)}
        >
          {selectedId === nodes.Sphere_1.uuid && <SelectedMesh />}
        </mesh>
        <mesh
          geometry={nodes.Sphere_2.geometry}
          material={materials['Material.003']}
          onClick={(event) => clickHandler(event, nodes.Sphere_2.uuid, setSelectedId)}
        >
          {selectedId === nodes.Sphere_2.uuid && <SelectedMesh />}
        </mesh>
      </group>
      <mesh
        geometry={nodes.Cylinder.geometry}
        material={materials['Material.005']}
        position={[0.308, 1.303, -0.842]}
        scale={[0.068, 0.02, 0.068]}
        onClick={(event) => clickHandler(event, nodes.Cylinder.uuid, setSelectedId)}
      >
        {selectedId === nodes.Cylinder.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Sphere001.geometry}
        material={materials['Material.015']}
        position={[0.308, 1.444, -0.842]}
        scale={[0.084, 0.137, 0.084]}
        onClick={(event) => clickHandler(event, nodes.Sphere001.uuid, setSelectedId)}
      >
        {selectedId === nodes.Sphere001.uuid && <SelectedMesh />}
      </mesh>
      <group position={[-0.065, 1.369, -0.82]} rotation={[0, -0.449, 0]} scale={[0.239, 0.39, 0.956]}>
        <mesh
          geometry={nodes.Cube005_1.geometry}
          material={materials['Material.010']}
          onClick={(event) => clickHandler(event, nodes.Cube005_1.uuid, setSelectedId)}
        >
          {selectedId === nodes.Cube005_1.uuid && <SelectedMesh />}
        </mesh>
        <mesh
          geometry={nodes.Cube005_2.geometry}
          material={materials['Material.011']}
          onClick={(event) => clickHandler(event, nodes.Cube005_2.uuid, setSelectedId)}
        >
          {selectedId === nodes.Cube005_2.uuid && <SelectedMesh />}
        </mesh>
      </group>
      <mesh
        geometry={nodes.Plane010.geometry}
        material={materials['Material.016']}
        position={[-0.435, 1.446, -0.918]}
        rotation={[1.09, 0, 0]}
        scale={[0.105, 0.159, 0.15]}
        onClick={(event) => clickHandler(event, nodes.Plane010.uuid, setSelectedId)}
      >
        {selectedId === nodes.Plane010.uuid && <SelectedMesh />}
      </mesh>
      <group position={[-0.065, 1.327, -0.82]} scale={[0.239, 0.39, 0.956]}>
        <mesh
          geometry={nodes.Cube006.geometry}
          material={materials['Material.012']}
          onClick={(event) => clickHandler(event, nodes.Cube006.uuid, setSelectedId)}
        >
          {selectedId === nodes.Cube006.uuid && <SelectedMesh />}
        </mesh>
        <mesh
          geometry={nodes.Cube006_1.geometry}
          material={materials['Material.011']}
          onClick={(event) => clickHandler(event, nodes.Cube006_1.uuid, setSelectedId)}
        >
          {selectedId === nodes.Cube006_1.uuid && <SelectedMesh />}
        </mesh>
      </group>
      <mesh
        geometry={nodes.Plane011.geometry}
        material={materials['Material.008']}
        position={[-0.318, 0.289, 0.142]}
        scale={[0.2, 0.279, 0.279]}
        onClick={(event) => clickHandler(event, nodes.Plane011.uuid, setSelectedId)}
      >
        {selectedId === nodes.Plane011.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Plane013.geometry}
        material={nodes.Plane013.material}
        position={[0.338, 0.597, -0.412]}
        scale={[0.171, 0.26, 0.148]}
        onClick={(event) => clickHandler(event, nodes.Plane013.uuid, setSelectedId)}
      >
        {selectedId === nodes.Plane013.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Cube005.geometry}
        material={materials['Material.006']}
        position={[0.795, 1.147, -0.282]}
        onClick={(event) => clickHandler(event, nodes.Cube005.uuid, setSelectedId)}
      >
        {selectedId === nodes.Cube005.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Cylinder001.geometry}
        material={materials['Material.006']}
        position={[0.8, 1.343, -0.115]}
        onClick={(event) => clickHandler(event, nodes.Cylinder001.uuid, setSelectedId)}
      >
        {selectedId === nodes.Cylinder001.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Cylinder002.geometry}
        material={nodes.Cylinder002.material}
        position={[0.801, 1.32, -0.115]}
        onClick={(event) => clickHandler(event, nodes.Cylinder002.uuid, setSelectedId)}
      >
        {selectedId === nodes.Cylinder002.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Cylinder003.geometry}
        material={nodes.Cylinder003.material}
        position={[0.8, 0.98, -0.115]}
        onClick={(event) => clickHandler(event, nodes.Cylinder003.uuid, setSelectedId)}
      >
        {selectedId === nodes.Cylinder003.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Cylinder004.geometry}
        material={nodes.Cylinder004.material}
        position={[0.801, 0.957, -0.115]}
        onClick={(event) => clickHandler(event, nodes.Cylinder004.uuid, setSelectedId)}
      >
        {selectedId === nodes.Cylinder004.uuid && <SelectedMesh />}
      </mesh>
      <mesh
        geometry={nodes.Plane014.geometry}
        material={materials['Material.011']}
        position={[0.787, 1.147, -0.411]}
        rotation={[0, 0, -Math.PI / 2]}
        onClick={(event) => clickHandler(event, nodes.Plane014.uuid, setSelectedId)}
      >
        {selectedId === nodes.Plane014.uuid && <SelectedMesh />}
      </mesh>
    </group>
  );
};
